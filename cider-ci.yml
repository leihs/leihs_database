jobs:
  meta:
    name: Meta
    description: |
      Various superordinate quality assurance tasks
    run_when:
      always:
        type: branch
        include_match: "^.*$"
        exclude_match: "^.*(no-ci|hotspot).*$"
    context:
      include:
        - cider-ci/shared/main-context.yml
      task_defaults:
        max_trials: 1
        environment_variables:
          LEIHS_DATABASE_DIR: "{{CIDER_CI_WORKING_DIR}}"
          RAILS_ENV: test

      tasks:
        check-migration-of-seeds:
          name: "Check if seeds-dump needs to be migrated"
          scripts:
            test:
              body: |
                #!/usr/bin/env bash
                set -euo pipefail
                cd $LEIHS_DATABASE_DIR
                unset PGPORT
                unset PGUSER
                PGPORT=${PG15PORT} PGUSER=${PG15USER} ./bin/seeds-check

        check-migration-of-personas:
          name: "Check if personas-dump needs to be migrated"
          scripts:
            test:
              body: |
                #!/usr/bin/env bash
                set -euo pipefail
                cd $LEIHS_DATABASE_DIR
                unset PGPORT
                unset PGUSER
                PGPORT=${PG15PORT} PGUSER=${PG15USER} ./bin/personas-check

        check-migration-of-demo:
          name: "Check if demo-dump needs to be migrated"
          scripts:
            test:
              body: |
                #!/usr/bin/env bash
                set -euo pipefail
                cd $LEIHS_DATABASE_DIR
                unset PGPORT
                unset PGUSER
                PGPORT=${PG15PORT} PGUSER=${PG15USER} ./bin/demo-check

  lint:
    name: "Linting"
    description: |
      Code checks: static checks and metrics: complexity, duplication, and format,
        also other consistency checks.
    priority: 3
    run_when:
      any branch has been updated:
        type: branch
        include_match: ^.*$
        exclude_match: "^.*(no-ci|hotspot).*$"
    context:
      task_defaults:
        git_options:
          submodules:
            include_match: ^.*$
      tasks:
        ruby-lint:
          scripts:
            test:
              body: |
                #!/usr/bin/env bash
                set -euo pipefail
                ./bin/rblint

  specs:
    name: "Run specs"
    run_when:
      any branch has been updated:
        type: branch
        include_match: "^.*$"
        exclude_match: "^.*(no-ci|hotspot).*$"
    context:
      include:
        - cider-ci/shared/main-context.yml
      generate_tasks:
        include_match: spec/.*_spec.rb
      task_defaults:
        include:
          - cider-ci/task-components/database.yml
        environment_variables:
          LEIHS_DATABASE_DIR: "{{CIDER_CI_WORKING_DIR}}"
          LEIHS_DATABASE_NAME: leihs_{{CIDER_CI_TRIAL_ID}}
          RAILS_ENV: test
        traits:
          Ruby: true
        git_options:
          submodules:
            include_match: ^.*$
        scripts:
          test:
            body: |
              #!/usr/bin/env bash
              set -euo pipefail
              cd ${LEIHS_DATABASE_DIR}
              mkdir -p log
              unset PGPORT
              unset PGUSER
              PGUSER="${PG15USER}" PGPORT="${PG15PORT}" ./bin/rspec --backtrace $CIDER_CI_TASK_FILE

  good-to-merge:
    name: Good To Merge
    description: |
      This job depends on all other tests and checks
      and it will pass if and only if all dependencies have passed.
      Status of this job is **used by github's "branch protection"**!
    depends_on: &GOOD_TO_MERGE_DEPENDENCIES
      specs were successful:
        type: job
        job_key: specs
        states: [passed]
      meta checks were successful:
        type: job
        job_key: meta
        states: [passed]
    run_when: *GOOD_TO_MERGE_DEPENDENCIES
    context:
      task_defaults:
        max_trials: 1
      tasks:
        all relevant tests have passed:
          name: "All relevant tests have passed, thus good to merge"
          scripts:
            main:
              body: echo 'All relevant tests have passed' ; exit 0

  merged-to-master:
    name: "Merged to master"
    priority: 999
    depends_on:
      master branch matches:
        type: branch
        include_match: ^master$
    run_when:
      master branch matches:
        type: branch
        include_match: ^master$
    context:
      tasks:
        merged-to-master:
          scripts:
            test:
              body: "exit 0"
